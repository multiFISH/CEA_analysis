suppressPackageStartupMessages({
library(mfishtools)    # This library!
library(gplots)        # This is for plotting gene panels only.
library(scrattch.vis)  # This is for plotting gene panels only.
library(matrixStats)   # For rowMedians function, which is fast
})
options(stringsAsFactors = FALSE)  # IMPORTANT
print("Libraries loaded.")
library(Seurat)
load('/Users/wangy6/Desktop/DATA/CEA_RNAseq/CEA_2021_analysis/cea_neuron_v3_final_Dec2021.proj')
seq_ident=as.data.frame(cea_neuron_new_V2@active.ident)
colnames(seq_ident) <- "Ident"
seq_count=subset(x = cea_neuron_new_V2@assays$RNA)
seq_count= as.matrix(seq_count@counts)
cl          = seq_ident
cl <- cl[match(colnames(seq_count),rownames(cl)),]
names(cl)=rownames(seq_ident)
normDat = log2(seq_count+1)
scDat=t(scale(t(seq_count)))
exprThresh = 1
medianExpr = do.call("cbind", tapply(names(cl), cl, function(x) rowMedians(normDat[,x])))
meanExpr = do.call("cbind", tapply(names(cl), cl, function(x) rowMeans(normDat[,x])))
propExpr   = do.call("cbind", tapply(names(cl), cl, function(x) rowMeans(normDat[,x]>exprThresh)))
scmeanExpr = do.call("cbind", tapply(names(cl), cl, function(x) rowMeans(scDat[,x])))
rownames(medianExpr) <- rownames(propExpr) <- genes <- rownames(normDat)
kpClust     = sort(unique(cl))
assignedCluster <- suppressWarnings(getTopMatch(corTreeMapping(mapDat = normDat[,],
medianDat=meanExpr[,kpClust], genesToMap=fishPanel)))
runGenes <- filterPanelGenes(
summaryExpr = meanExpr,  # medians (could also try means); We enter linear values to match the linear limits below   # proportions
startingGenes  = markers,  # Starting genes (from above)
numBinaryGenes = 250,      # Number of binary genes (explained below)
minOn     = 1,   # Minimum required expression in highest expressing cell type
maxOn     = 500,  # Maximum allowed expression
maxOff    = 50,   # Maximum allowed expression in off types (e.g., aviod glial expression)
minLength = 50,  # Minimum gene length (to allow probe design; ignored in this case)
fractionOnClusters = 0.4,  # Max fraction of on clusters (described above)
excludeGenes    = NULL,    # Genes to exclude.  Often sex chromosome or mitochondrial genes would be input here.
excludeFamilies = c("LOC","Fam","RIK","RPS","RPL","\\-","Rnf","BC0")) # Avoid LOC markers, in this case
markers=c("Drd1","Tac2","Nefm","Dlk1","Cartpt","Vipr2","Gpx3","Pdyn","Drd2","Ebf1","Penk","Vdr","Prkcd","Sst",
"Cyp26b1","Gad1","Nts","Crym","Gal","Crh","Oprk1","Tac1","Htr2c","Htr1b","Scn4b","Sema3c","Vgf","Ppp1r1b","Npy1r")
X=fractionCorrectWithGenes(markers,normDat,meanExpr[,kpClust],cl,
main="Mapping quality for different numbers of included genes",return=TRUE)
runGenes <- filterPanelGenes(
summaryExpr = meanExpr,  # medians (could also try means); We enter linear values to match the linear limits below   # proportions
startingGenes  = markers,  # Starting genes (from above)
numBinaryGenes = 250,      # Number of binary genes (explained below)
minOn     = 1,   # Minimum required expression in highest expressing cell type
maxOn     = 500,  # Maximum allowed expression
maxOff    = 50,   # Maximum allowed expression in off types (e.g., aviod glial expression)
minLength = 50,  # Minimum gene length (to allow probe design; ignored in this case)
fractionOnClusters = 0.4,  # Max fraction of on clusters (described above)
excludeGenes    = NULL,    # Genes to exclude.  Often sex chromosome or mitochondrial genes would be input here.
excludeFamilies = c("LOC","Fam","RIK","RPS","RPL","\\-","Rnf","BC0")) # Avoid LOC markers, in this case
kpClust     = sort(unique(cl))
corDist         <- function(x) return(as.dist(1-cor(x)))
clusterDistance <- as.matrix(corDist(meanExpr[,kpClust]))
print(dim(clusterDistance))
heatmap.2(clusterDistance,Rowv=FALSE,Colv=FALSE,trace="none",dendrogram="none",col=viridis(100),key.title=NA)
library(viridis)
heatmap.2(clusterDistance,Rowv=FALSE,Colv=FALSE,trace="none",dendrogram="none",col=viridis(100),key.title=NA)
fishPanel <- buildMappingBasedMarkerPanel(
mapDat        = normDat[runGenes,],     # Data for optimization
medianDat     = meanExpr[runGenes,kpClust], # Median expression levels of relevant genes in relevant clusters
clustersF     = cl,                   # Vector of cluster assignments
panelSize     = 80,                           # Final panel size
currentPanel  = markers,            # Starting gene panel
subSamp       = 80,
corMapping = TRUE,
# Maximum number of cells per cluster to include in analysis (20-50 is usually best)
optimize      = "CorrelationDistance",        # FractionCorrect maximizes the fraction correctly mapping to each cluster
qMin =0.9,
percentSubset = 100                          # Only consider a certain percent of genes each iteration to speed up calculations (in most cases this is not recommeded)
)
fishPanel <- buildMappingBasedMarkerPanel(
mapDat        = normDat[runGenes,],     # Data for optimization
medianDat     = meanExpr[runGenes,kpClust], # Median expression levels of relevant genes in relevant clusters
clustersF     = cl,                   # Vector of cluster assignments
panelSize     = 100,                # Final panel size
currentPanel  = markers,            # Starting gene panel
subSamp       = 80,
corMapping = TRUE,
# Maximum number of cells per cluster to include in analysis (20-50 is usually best)
optimize      = "CorrelationDistance",        # FractionCorrect maximizes the fraction correctly mapping to each cluster
qMin =0.9,
percentSubset = 100                          # Only consider a certain percent of genes each iteration to speed up calculations (in most cases this is not recommeded)
)
fishPanel <- buildMappingBasedMarkerPanel(
mapDat        = normDat[runGenes,],     # Data for optimization
medianDat     = meanExpr[runGenes,kpClust], # Median expression levels of relevant genes in relevant clusters
clustersF     = cl,                   # Vector of cluster assignments
panelSize     = 100,                # Final panel size
currentPanel  = markers,            # Starting gene panel
subSamp       = 80,
corMapping = TRUE,
# Maximum number of cells per cluster to include in analysis (20-50 is usually best)
optimize      = "FractionCorrect",        # FractionCorrect maximizes the fraction correctly mapping to each cluster
qMin =0.9,
percentSubset = 100                          # Only consider a certain percent of genes each iteration to speed up calculations (in most cases this is not recommeded)
)
fractionCorrectWithGenes(fishPanel,normDat,meanExpr[,kpClust],cl,
main="Mapping quality for different numbers of included genes",return=TRUE)
assignedCluster <- suppressWarnings(getTopMatch(corTreeMapping(mapDat = normDat[runGenes,],
medianDat=propExpr[runGenes,kpClust], genesToMap=fishPanel)))
print(paste0("Percent correctly mapped: ",signif(100*mean(as.character(assignedCluster$TopLeaf)==cl,na.rm=TRUE),3),"%"))
membConfusionProp  <- getConfusionMatrix(cl,assignedCluster[,1],TRUE)
library(viridis)
clid=levels(seq_ident$Ident)
#clOrd <- (annotations$primary_type_label[match(clid_inh,annotations$primary_type_id)])  # Cluster order
heatmap.2(pmin(membConfusionProp,1)[clid,clid],Rowv=FALSE,Colv=FALSE,trace="none",dendrogram="none",
lhei=c(1.4, 5.5),lwid=c(4,10),main="Confusion Matrix",col=viridis(100),key.title=NA)
